# What

Interface design notes

## Main function signature

  1.

    bool (char*, ui2*, ui2)

    "if (GetEntity(&Entity, &EntityLen, 2))"

    So caller must provide pointer to buffer where characters would
    be stored and capacity of that buffer so we wont write past it.
    We will write length of captured entity to ui2*.

    Implementation-friendly. That parameters naturally go to
    implementation core.

    Quite common in C. Passing zillions base type parameters.

  2.

    bool ((char*, ui2*, bool), (char*, ui2))

    "if GetEntity(&Entity, Buffer)"

    Here we introducing interface structures.

      Entity is described as

        * Chars - pointer to ASCIIZ

          One byte is wasted, data may contradict with <.Length>.

          But I want to be able printf() it. It's practical.

        * Length - length of ASCIIZ

          Yes, you can get string length with O(1) complexity!
          Unbelievable in C world.

        * IsTrimmed - there were more data but we purged it

          Practical too. As I've explained in other section, we want to
          keep tracking of number of entities. The buck stops here. If
          we can't process one, do whatever you want but leave stream
          pointer at the next gap.

      Buffer is described as memory segment

        * Start - memory address for start of data
        * Length - length of data

        I wondering why in such glorious language base functions
        like memcpy() and memcmp() does not use structures.

        I suspect community was unable to have consensus how to name
        fields. But I am free to design code like I want, rare state.


## What to do when we don't have capacity to store entity?

Say our stream is

  "123 45"

and we are calling

  GetEntity(&Entity, &EntityLen, 2)  <- Entity capacity is 2 characters

What our call should return, place into <Entity> and what state of stream?

  true, "12", "3 45"

    Bad. Next call will return (true, "3", " 45"). We splat entity "123"
    to "12" and "3" because of our implementation details.

  true, "12", " 45"

    Practical. We trimmed entity "123" to "12". Implemented.
    Detecting trimmed entity is not ours problem.

  true, "45", ""

    Somewhat correct. But we lost position in parsing entries sequence.
    That makes outer logic senseless.


## UART transmission is like blinking flashlight..

When you missed it, you missed it.

Luckily for you, Arduino firmware can catch it. That stuff is called
"hardware interrupts".

Serial's code places bytes it saw in a buffer. When your call
Serial.read() it gets byte from that buffer.

Serial input buffer size is 64 bytes. You can't afford large buffer
with 2k memory.

When buffer is full, you are losing bytes again.

That's quite bad thing because you don't know what was lost.

Best course of action when you (your code) has detected input buffer
overflow is abort what you was doing, keep purging buffer until you get
pause, wait "wtf?" request, explain what happened and wait for new
commands.

Typically 8 bits of byte is transmitted as 10 bits. Inflation, my friend.

So 57600 baud is 5760 bytes per second. Less than 12 ms to fill that
buffer.


-- Martin, 2024-05-23
